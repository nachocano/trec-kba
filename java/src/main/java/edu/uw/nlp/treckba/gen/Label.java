/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uw.nlp.treckba.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Labels are human generated assertions about a portion of a document
 * For example, a human author might label their own text by inserting
 * hyperlinks to Wikipedia, or a NIST assessor might record which
 * tokens in a text mention a target entity.
 * 
 * Label instances can be attached in three palces:
 *  -  Token.labels  list
 *  -  Sentence.labels  list
 *  -  ContentItem.labels  map
 */
public class Label implements org.apache.thrift.TBase<Label, Label._Fields>, java.io.Serializable, Cloneable, Comparable<Label> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Label");

  private static final org.apache.thrift.protocol.TField ANNOTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("annotator", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("offsets", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField POSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("positive", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("mentions", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField RELEVANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("relevance", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_id", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LabelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LabelTupleSchemeFactory());
  }

  /**
   * identifies the source of this Label
   */
  public Annotator annotator; // required
  /**
   * identifies the information need assessed by annotator
   */
  public Target target; // required
  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Map<OffsetType,Offset> offsets; // optional
  /**
   * Labels are usually positive assertions that the token mentions
   * the target_id.  It is sometimes useful to collect negative
   * assertions that a token is NOT the target_id, which can be
   * indicated by setting Label.positive to False
   */
  public boolean positive; // optional
  /**
   * Save notes from Annotator about this Rating
   */
  public String comments; // optional
  /**
   * Record strings that are "mentions" of the target in this text.
   * 
   * Note: there used to be a field 'contains mention' which would
   * allow for a document to be labeled as about a thing without
   * containing a string naming the thing. That hardly ever actually
   * happened, but maybe someday it could be added back if needed.
   */
  public List<String> mentions; // optional
  /**
   * numerical score assigned by annotator to "judge" or "rate" the
   * utility of this StreamItem to addressing the target information
   * need.  The range and interpretation of relevance numbers depends
   * on the annotator.  relevance can represent a rank ordering or an
   * enumeration such as -1=Garbage, 0=Neutral, 1=Useful, 2=Vital
   */
  public short relevance; // optional
  /**
   * Stream ID for this label.  This is the stream_id for the source
   * StreamItem, if a label is stored independently from its original
   * data.
   */
  public String stream_id; // optional
  /**
   * General purpose flags. These flags can be used to mark documents
   * as meeting an extensible set of criteria.
   */
  public List<FlagType> flags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * identifies the source of this Label
     */
    ANNOTATOR((short)1, "annotator"),
    /**
     * identifies the information need assessed by annotator
     */
    TARGET((short)2, "target"),
    /**
     * pointers to data to which this label applies.  If empty, then
     * label applies to the entire Token, Sentence, or ContentItem to
     * which it is attached.
     */
    OFFSETS((short)3, "offsets"),
    /**
     * Labels are usually positive assertions that the token mentions
     * the target_id.  It is sometimes useful to collect negative
     * assertions that a token is NOT the target_id, which can be
     * indicated by setting Label.positive to False
     */
    POSITIVE((short)4, "positive"),
    /**
     * Save notes from Annotator about this Rating
     */
    COMMENTS((short)5, "comments"),
    /**
     * Record strings that are "mentions" of the target in this text.
     * 
     * Note: there used to be a field 'contains mention' which would
     * allow for a document to be labeled as about a thing without
     * containing a string naming the thing. That hardly ever actually
     * happened, but maybe someday it could be added back if needed.
     */
    MENTIONS((short)6, "mentions"),
    /**
     * numerical score assigned by annotator to "judge" or "rate" the
     * utility of this StreamItem to addressing the target information
     * need.  The range and interpretation of relevance numbers depends
     * on the annotator.  relevance can represent a rank ordering or an
     * enumeration such as -1=Garbage, 0=Neutral, 1=Useful, 2=Vital
     */
    RELEVANCE((short)7, "relevance"),
    /**
     * Stream ID for this label.  This is the stream_id for the source
     * StreamItem, if a label is stored independently from its original
     * data.
     */
    STREAM_ID((short)8, "stream_id"),
    /**
     * General purpose flags. These flags can be used to mark documents
     * as meeting an extensible set of criteria.
     */
    FLAGS((short)9, "flags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANNOTATOR
          return ANNOTATOR;
        case 2: // TARGET
          return TARGET;
        case 3: // OFFSETS
          return OFFSETS;
        case 4: // POSITIVE
          return POSITIVE;
        case 5: // COMMENTS
          return COMMENTS;
        case 6: // MENTIONS
          return MENTIONS;
        case 7: // RELEVANCE
          return RELEVANCE;
        case 8: // STREAM_ID
          return STREAM_ID;
        case 9: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITIVE_ISSET_ID = 0;
  private static final int __RELEVANCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OFFSETS,_Fields.POSITIVE,_Fields.COMMENTS,_Fields.MENTIONS,_Fields.RELEVANCE,_Fields.STREAM_ID,_Fields.FLAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANNOTATOR, new org.apache.thrift.meta_data.FieldMetaData("annotator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotator.class)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Target.class)));
    tmpMap.put(_Fields.OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("offsets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OffsetType.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Offset.class))));
    tmpMap.put(_Fields.POSITIVE, new org.apache.thrift.meta_data.FieldMetaData("positive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("mentions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RELEVANCE, new org.apache.thrift.meta_data.FieldMetaData("relevance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("stream_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FlagType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Label.class, metaDataMap);
  }

  public Label() {
    this.offsets = new HashMap<OffsetType,Offset>();

    this.positive = true;

  }

  public Label(
    Annotator annotator,
    Target target)
  {
    this();
    this.annotator = annotator;
    this.target = target;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Label(Label other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAnnotator()) {
      this.annotator = new Annotator(other.annotator);
    }
    if (other.isSetTarget()) {
      this.target = new Target(other.target);
    }
    if (other.isSetOffsets()) {
      Map<OffsetType,Offset> __this__offsets = new HashMap<OffsetType,Offset>(other.offsets.size());
      for (Map.Entry<OffsetType, Offset> other_element : other.offsets.entrySet()) {

        OffsetType other_element_key = other_element.getKey();
        Offset other_element_value = other_element.getValue();

        OffsetType __this__offsets_copy_key = other_element_key;

        Offset __this__offsets_copy_value = new Offset(other_element_value);

        __this__offsets.put(__this__offsets_copy_key, __this__offsets_copy_value);
      }
      this.offsets = __this__offsets;
    }
    this.positive = other.positive;
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
    if (other.isSetMentions()) {
      List<String> __this__mentions = new ArrayList<String>(other.mentions);
      this.mentions = __this__mentions;
    }
    this.relevance = other.relevance;
    if (other.isSetStream_id()) {
      this.stream_id = other.stream_id;
    }
    if (other.isSetFlags()) {
      List<FlagType> __this__flags = new ArrayList<FlagType>(other.flags.size());
      for (FlagType other_element : other.flags) {
        __this__flags.add(other_element);
      }
      this.flags = __this__flags;
    }
  }

  public Label deepCopy() {
    return new Label(this);
  }

  @Override
  public void clear() {
    this.annotator = null;
    this.target = null;
    this.offsets = new HashMap<OffsetType,Offset>();

    this.positive = true;

    this.comments = null;
    this.mentions = null;
    setRelevanceIsSet(false);
    this.relevance = 0;
    this.stream_id = null;
    this.flags = null;
  }

  /**
   * identifies the source of this Label
   */
  public Annotator getAnnotator() {
    return this.annotator;
  }

  /**
   * identifies the source of this Label
   */
  public Label setAnnotator(Annotator annotator) {
    this.annotator = annotator;
    return this;
  }

  public void unsetAnnotator() {
    this.annotator = null;
  }

  /** Returns true if field annotator is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotator() {
    return this.annotator != null;
  }

  public void setAnnotatorIsSet(boolean value) {
    if (!value) {
      this.annotator = null;
    }
  }

  /**
   * identifies the information need assessed by annotator
   */
  public Target getTarget() {
    return this.target;
  }

  /**
   * identifies the information need assessed by annotator
   */
  public Label setTarget(Target target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public int getOffsetsSize() {
    return (this.offsets == null) ? 0 : this.offsets.size();
  }

  public void putToOffsets(OffsetType key, Offset val) {
    if (this.offsets == null) {
      this.offsets = new HashMap<OffsetType,Offset>();
    }
    this.offsets.put(key, val);
  }

  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Map<OffsetType,Offset> getOffsets() {
    return this.offsets;
  }

  /**
   * pointers to data to which this label applies.  If empty, then
   * label applies to the entire Token, Sentence, or ContentItem to
   * which it is attached.
   */
  public Label setOffsets(Map<OffsetType,Offset> offsets) {
    this.offsets = offsets;
    return this;
  }

  public void unsetOffsets() {
    this.offsets = null;
  }

  /** Returns true if field offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetOffsets() {
    return this.offsets != null;
  }

  public void setOffsetsIsSet(boolean value) {
    if (!value) {
      this.offsets = null;
    }
  }

  /**
   * Labels are usually positive assertions that the token mentions
   * the target_id.  It is sometimes useful to collect negative
   * assertions that a token is NOT the target_id, which can be
   * indicated by setting Label.positive to False
   */
  public boolean isPositive() {
    return this.positive;
  }

  /**
   * Labels are usually positive assertions that the token mentions
   * the target_id.  It is sometimes useful to collect negative
   * assertions that a token is NOT the target_id, which can be
   * indicated by setting Label.positive to False
   */
  public Label setPositive(boolean positive) {
    this.positive = positive;
    setPositiveIsSet(true);
    return this;
  }

  public void unsetPositive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIVE_ISSET_ID);
  }

  /** Returns true if field positive is set (has been assigned a value) and false otherwise */
  public boolean isSetPositive() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIVE_ISSET_ID);
  }

  public void setPositiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIVE_ISSET_ID, value);
  }

  /**
   * Save notes from Annotator about this Rating
   */
  public String getComments() {
    return this.comments;
  }

  /**
   * Save notes from Annotator about this Rating
   */
  public Label setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public int getMentionsSize() {
    return (this.mentions == null) ? 0 : this.mentions.size();
  }

  public java.util.Iterator<String> getMentionsIterator() {
    return (this.mentions == null) ? null : this.mentions.iterator();
  }

  public void addToMentions(String elem) {
    if (this.mentions == null) {
      this.mentions = new ArrayList<String>();
    }
    this.mentions.add(elem);
  }

  /**
   * Record strings that are "mentions" of the target in this text.
   * 
   * Note: there used to be a field 'contains mention' which would
   * allow for a document to be labeled as about a thing without
   * containing a string naming the thing. That hardly ever actually
   * happened, but maybe someday it could be added back if needed.
   */
  public List<String> getMentions() {
    return this.mentions;
  }

  /**
   * Record strings that are "mentions" of the target in this text.
   * 
   * Note: there used to be a field 'contains mention' which would
   * allow for a document to be labeled as about a thing without
   * containing a string naming the thing. That hardly ever actually
   * happened, but maybe someday it could be added back if needed.
   */
  public Label setMentions(List<String> mentions) {
    this.mentions = mentions;
    return this;
  }

  public void unsetMentions() {
    this.mentions = null;
  }

  /** Returns true if field mentions is set (has been assigned a value) and false otherwise */
  public boolean isSetMentions() {
    return this.mentions != null;
  }

  public void setMentionsIsSet(boolean value) {
    if (!value) {
      this.mentions = null;
    }
  }

  /**
   * numerical score assigned by annotator to "judge" or "rate" the
   * utility of this StreamItem to addressing the target information
   * need.  The range and interpretation of relevance numbers depends
   * on the annotator.  relevance can represent a rank ordering or an
   * enumeration such as -1=Garbage, 0=Neutral, 1=Useful, 2=Vital
   */
  public short getRelevance() {
    return this.relevance;
  }

  /**
   * numerical score assigned by annotator to "judge" or "rate" the
   * utility of this StreamItem to addressing the target information
   * need.  The range and interpretation of relevance numbers depends
   * on the annotator.  relevance can represent a rank ordering or an
   * enumeration such as -1=Garbage, 0=Neutral, 1=Useful, 2=Vital
   */
  public Label setRelevance(short relevance) {
    this.relevance = relevance;
    setRelevanceIsSet(true);
    return this;
  }

  public void unsetRelevance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELEVANCE_ISSET_ID);
  }

  /** Returns true if field relevance is set (has been assigned a value) and false otherwise */
  public boolean isSetRelevance() {
    return EncodingUtils.testBit(__isset_bitfield, __RELEVANCE_ISSET_ID);
  }

  public void setRelevanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELEVANCE_ISSET_ID, value);
  }

  /**
   * Stream ID for this label.  This is the stream_id for the source
   * StreamItem, if a label is stored independently from its original
   * data.
   */
  public String getStream_id() {
    return this.stream_id;
  }

  /**
   * Stream ID for this label.  This is the stream_id for the source
   * StreamItem, if a label is stored independently from its original
   * data.
   */
  public Label setStream_id(String stream_id) {
    this.stream_id = stream_id;
    return this;
  }

  public void unsetStream_id() {
    this.stream_id = null;
  }

  /** Returns true if field stream_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_id() {
    return this.stream_id != null;
  }

  public void setStream_idIsSet(boolean value) {
    if (!value) {
      this.stream_id = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public java.util.Iterator<FlagType> getFlagsIterator() {
    return (this.flags == null) ? null : this.flags.iterator();
  }

  public void addToFlags(FlagType elem) {
    if (this.flags == null) {
      this.flags = new ArrayList<FlagType>();
    }
    this.flags.add(elem);
  }

  /**
   * General purpose flags. These flags can be used to mark documents
   * as meeting an extensible set of criteria.
   */
  public List<FlagType> getFlags() {
    return this.flags;
  }

  /**
   * General purpose flags. These flags can be used to mark documents
   * as meeting an extensible set of criteria.
   */
  public Label setFlags(List<FlagType> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANNOTATOR:
      if (value == null) {
        unsetAnnotator();
      } else {
        setAnnotator((Annotator)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((Target)value);
      }
      break;

    case OFFSETS:
      if (value == null) {
        unsetOffsets();
      } else {
        setOffsets((Map<OffsetType,Offset>)value);
      }
      break;

    case POSITIVE:
      if (value == null) {
        unsetPositive();
      } else {
        setPositive((Boolean)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    case MENTIONS:
      if (value == null) {
        unsetMentions();
      } else {
        setMentions((List<String>)value);
      }
      break;

    case RELEVANCE:
      if (value == null) {
        unsetRelevance();
      } else {
        setRelevance((Short)value);
      }
      break;

    case STREAM_ID:
      if (value == null) {
        unsetStream_id();
      } else {
        setStream_id((String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((List<FlagType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANNOTATOR:
      return getAnnotator();

    case TARGET:
      return getTarget();

    case OFFSETS:
      return getOffsets();

    case POSITIVE:
      return Boolean.valueOf(isPositive());

    case COMMENTS:
      return getComments();

    case MENTIONS:
      return getMentions();

    case RELEVANCE:
      return Short.valueOf(getRelevance());

    case STREAM_ID:
      return getStream_id();

    case FLAGS:
      return getFlags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANNOTATOR:
      return isSetAnnotator();
    case TARGET:
      return isSetTarget();
    case OFFSETS:
      return isSetOffsets();
    case POSITIVE:
      return isSetPositive();
    case COMMENTS:
      return isSetComments();
    case MENTIONS:
      return isSetMentions();
    case RELEVANCE:
      return isSetRelevance();
    case STREAM_ID:
      return isSetStream_id();
    case FLAGS:
      return isSetFlags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Label)
      return this.equals((Label)that);
    return false;
  }

  public boolean equals(Label that) {
    if (that == null)
      return false;

    boolean this_present_annotator = true && this.isSetAnnotator();
    boolean that_present_annotator = true && that.isSetAnnotator();
    if (this_present_annotator || that_present_annotator) {
      if (!(this_present_annotator && that_present_annotator))
        return false;
      if (!this.annotator.equals(that.annotator))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_offsets = true && this.isSetOffsets();
    boolean that_present_offsets = true && that.isSetOffsets();
    if (this_present_offsets || that_present_offsets) {
      if (!(this_present_offsets && that_present_offsets))
        return false;
      if (!this.offsets.equals(that.offsets))
        return false;
    }

    boolean this_present_positive = true && this.isSetPositive();
    boolean that_present_positive = true && that.isSetPositive();
    if (this_present_positive || that_present_positive) {
      if (!(this_present_positive && that_present_positive))
        return false;
      if (this.positive != that.positive)
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    boolean this_present_mentions = true && this.isSetMentions();
    boolean that_present_mentions = true && that.isSetMentions();
    if (this_present_mentions || that_present_mentions) {
      if (!(this_present_mentions && that_present_mentions))
        return false;
      if (!this.mentions.equals(that.mentions))
        return false;
    }

    boolean this_present_relevance = true && this.isSetRelevance();
    boolean that_present_relevance = true && that.isSetRelevance();
    if (this_present_relevance || that_present_relevance) {
      if (!(this_present_relevance && that_present_relevance))
        return false;
      if (this.relevance != that.relevance)
        return false;
    }

    boolean this_present_stream_id = true && this.isSetStream_id();
    boolean that_present_stream_id = true && that.isSetStream_id();
    if (this_present_stream_id || that_present_stream_id) {
      if (!(this_present_stream_id && that_present_stream_id))
        return false;
      if (!this.stream_id.equals(that.stream_id))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Label other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnnotator()).compareTo(other.isSetAnnotator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotator, other.annotator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffsets()).compareTo(other.isSetOffsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsets, other.offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositive()).compareTo(other.isSetPositive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positive, other.positive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMentions()).compareTo(other.isSetMentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentions, other.mentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelevance()).compareTo(other.isSetRelevance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelevance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relevance, other.relevance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStream_id()).compareTo(other.isSetStream_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_id, other.stream_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Label(");
    boolean first = true;

    sb.append("annotator:");
    if (this.annotator == null) {
      sb.append("null");
    } else {
      sb.append(this.annotator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (isSetOffsets()) {
      if (!first) sb.append(", ");
      sb.append("offsets:");
      if (this.offsets == null) {
        sb.append("null");
      } else {
        sb.append(this.offsets);
      }
      first = false;
    }
    if (isSetPositive()) {
      if (!first) sb.append(", ");
      sb.append("positive:");
      sb.append(this.positive);
      first = false;
    }
    if (isSetComments()) {
      if (!first) sb.append(", ");
      sb.append("comments:");
      if (this.comments == null) {
        sb.append("null");
      } else {
        sb.append(this.comments);
      }
      first = false;
    }
    if (isSetMentions()) {
      if (!first) sb.append(", ");
      sb.append("mentions:");
      if (this.mentions == null) {
        sb.append("null");
      } else {
        sb.append(this.mentions);
      }
      first = false;
    }
    if (isSetRelevance()) {
      if (!first) sb.append(", ");
      sb.append("relevance:");
      sb.append(this.relevance);
      first = false;
    }
    if (isSetStream_id()) {
      if (!first) sb.append(", ");
      sb.append("stream_id:");
      if (this.stream_id == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_id);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (annotator != null) {
      annotator.validate();
    }
    if (target != null) {
      target.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LabelStandardSchemeFactory implements SchemeFactory {
    public LabelStandardScheme getScheme() {
      return new LabelStandardScheme();
    }
  }

  private static class LabelStandardScheme extends StandardScheme<Label> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Label struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANNOTATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.annotator = new Annotator();
              struct.annotator.read(iprot);
              struct.setAnnotatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.target = new Target();
              struct.target.read(iprot);
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.offsets = new HashMap<OffsetType,Offset>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  OffsetType _key2;
                  Offset _val3;
                  _key2 = OffsetType.findByValue(iprot.readI32());
                  _val3 = new Offset();
                  _val3.read(iprot);
                  struct.offsets.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setOffsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.positive = iprot.readBool();
              struct.setPositiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.mentions = new ArrayList<String>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  String _elem6;
                  _elem6 = iprot.readString();
                  struct.mentions.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setMentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RELEVANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.relevance = iprot.readI16();
              struct.setRelevanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stream_id = iprot.readString();
              struct.setStream_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.flags = new ArrayList<FlagType>(_list7.size);
                for (int _i8 = 0; _i8 < _list7.size; ++_i8)
                {
                  FlagType _elem9;
                  _elem9 = FlagType.findByValue(iprot.readI32());
                  struct.flags.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Label struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.annotator != null) {
        oprot.writeFieldBegin(ANNOTATOR_FIELD_DESC);
        struct.annotator.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        struct.target.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.offsets != null) {
        if (struct.isSetOffsets()) {
          oprot.writeFieldBegin(OFFSETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.offsets.size()));
            for (Map.Entry<OffsetType, Offset> _iter10 : struct.offsets.entrySet())
            {
              oprot.writeI32(_iter10.getKey().getValue());
              _iter10.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositive()) {
        oprot.writeFieldBegin(POSITIVE_FIELD_DESC);
        oprot.writeBool(struct.positive);
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        if (struct.isSetComments()) {
          oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
          oprot.writeString(struct.comments);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mentions != null) {
        if (struct.isSetMentions()) {
          oprot.writeFieldBegin(MENTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mentions.size()));
            for (String _iter11 : struct.mentions)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRelevance()) {
        oprot.writeFieldBegin(RELEVANCE_FIELD_DESC);
        oprot.writeI16(struct.relevance);
        oprot.writeFieldEnd();
      }
      if (struct.stream_id != null) {
        if (struct.isSetStream_id()) {
          oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
          oprot.writeString(struct.stream_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.flags.size()));
            for (FlagType _iter12 : struct.flags)
            {
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LabelTupleSchemeFactory implements SchemeFactory {
    public LabelTupleScheme getScheme() {
      return new LabelTupleScheme();
    }
  }

  private static class LabelTupleScheme extends TupleScheme<Label> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Label struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnnotator()) {
        optionals.set(0);
      }
      if (struct.isSetTarget()) {
        optionals.set(1);
      }
      if (struct.isSetOffsets()) {
        optionals.set(2);
      }
      if (struct.isSetPositive()) {
        optionals.set(3);
      }
      if (struct.isSetComments()) {
        optionals.set(4);
      }
      if (struct.isSetMentions()) {
        optionals.set(5);
      }
      if (struct.isSetRelevance()) {
        optionals.set(6);
      }
      if (struct.isSetStream_id()) {
        optionals.set(7);
      }
      if (struct.isSetFlags()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAnnotator()) {
        struct.annotator.write(oprot);
      }
      if (struct.isSetTarget()) {
        struct.target.write(oprot);
      }
      if (struct.isSetOffsets()) {
        {
          oprot.writeI32(struct.offsets.size());
          for (Map.Entry<OffsetType, Offset> _iter13 : struct.offsets.entrySet())
          {
            oprot.writeI32(_iter13.getKey().getValue());
            _iter13.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPositive()) {
        oprot.writeBool(struct.positive);
      }
      if (struct.isSetComments()) {
        oprot.writeString(struct.comments);
      }
      if (struct.isSetMentions()) {
        {
          oprot.writeI32(struct.mentions.size());
          for (String _iter14 : struct.mentions)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetRelevance()) {
        oprot.writeI16(struct.relevance);
      }
      if (struct.isSetStream_id()) {
        oprot.writeString(struct.stream_id);
      }
      if (struct.isSetFlags()) {
        {
          oprot.writeI32(struct.flags.size());
          for (FlagType _iter15 : struct.flags)
          {
            oprot.writeI32(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Label struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.annotator = new Annotator();
        struct.annotator.read(iprot);
        struct.setAnnotatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.target = new Target();
        struct.target.read(iprot);
        struct.setTargetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.offsets = new HashMap<OffsetType,Offset>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            OffsetType _key18;
            Offset _val19;
            _key18 = OffsetType.findByValue(iprot.readI32());
            _val19 = new Offset();
            _val19.read(iprot);
            struct.offsets.put(_key18, _val19);
          }
        }
        struct.setOffsetsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positive = iprot.readBool();
        struct.setPositiveIsSet(true);
      }
      if (incoming.get(4)) {
        struct.comments = iprot.readString();
        struct.setCommentsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mentions = new ArrayList<String>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            String _elem22;
            _elem22 = iprot.readString();
            struct.mentions.add(_elem22);
          }
        }
        struct.setMentionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.relevance = iprot.readI16();
        struct.setRelevanceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stream_id = iprot.readString();
        struct.setStream_idIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.flags = new ArrayList<FlagType>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            FlagType _elem25;
            _elem25 = FlagType.findByValue(iprot.readI32());
            struct.flags.add(_elem25);
          }
        }
        struct.setFlagsIsSet(true);
      }
    }
  }

}

